<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CodeForces-1249E By Elevator or Stairs?（线性DP）</title>
      <link href="/2019/10/31/CF1249E/"/>
      <url>/2019/10/31/CF1249E/</url>
      
        <content type="html"><![CDATA[<p><strong>传送门：</strong><a href="https://codeforces.com/contest/1249/problem/E" target="_blank" rel="noopener">CodeForces - 1249E</a></p><h2 id="一-题目描述"><a href="#一-题目描述" class="headerlink" title="一. 题目描述"></a>一. 题目描述</h2><p>You are planning to buy an apartment in a n-floor building. The floors are numbered from 1 to n from the bottom to the top. At first for each floor you want to know the minimum total time to reach it from the first （the bottom） floor.  </p><p>Let:</p><p>ai for all i from 1 to n−1 be the time required to go from the i-th floor to the (i+1)-th one （and from the (i+1)-th to the i-th as well） using the stairs  </p><p>bi for all i from 1 to n−1 be the time required to go from the i-th floor to the (i+1)-th one （and from the (i+1)-th to the i-th as well） using the elevator, also there is a value c — time overhead for elevator usage （you need to wait for it, the elevator doors are too slow!）  </p><p>In one move, you can go from the floor you are staying at x to any floor y (x≠y) in two different ways:</p><p>If you are using the stairs, just sum up the corresponding values of ai. Formally, it will take $∑i=min(x,y)max(x,y)$−1ai time units.</p><p>If you are using the elevator, just sum up c and the corresponding values of bi. Formally, it will take $c+∑i=min(x,y)max(x,y)$−1bi time units.</p><p>You can perform as many moves as you want （possibly zero）.</p><p>So your task is for each i to determine the minimum total time it takes to reach the i-th floor from the 1-st (bottom) floor.</p><h2 id="二-输入描述"><a href="#二-输入描述" class="headerlink" title="二. 输入描述"></a>二. 输入描述</h2><p>The first line of the input contains two integers n and c $(2≤n≤2⋅10^5,1≤c≤1000)$ — the number of floors in the building and the time overhead for the elevator rides.</p><p>The second line of the input contains n−1 integers $a_1,a_2,…,a_{n−1}$ $(1≤a_i≤1000)$, where ai is the time required to go from the i-th floor to the (i+1)-th one （and from the (i+1)-th to the i-th as well） using the stairs.</p><p>The third line of the input contains n−1 integers $b_1,b_2,…,b_{n−1}$ $(1≤b_i≤1000)$, where bi is the time required to go from the i-th floor to the (i+1)-th one （and from the (i+1)-th to the i-th as well） using the elevator.</p><h2 id="三-输出描述"><a href="#三-输出描述" class="headerlink" title="三. 输出描述"></a>三. 输出描述</h2><p>Print n integers t1,t2,…,tn, where ti is the minimum total time to reach the i-th floor from the first floor if you can perform as many moves as you want.</p><h2 id="四-题意分析"><a href="#四-题意分析" class="headerlink" title="四. 题意分析"></a>四. 题意分析</h2><p>选择坐电梯或者楼梯，坐电梯前需等待c，求最短时间</p><h2 id="五-样例输入"><a href="#五-样例输入" class="headerlink" title="五. 样例输入"></a>五. 样例输入</h2><pre><code>10 27 6 18 6 16 18 1 17 176 9 3 10 9 1 10 1 5</code></pre><h2 id="六-样例输出"><a href="#六-样例输出" class="headerlink" title="六. 样例输出"></a>六. 样例输出</h2><pre><code>0 7 13 18 24 35 36 37 40 45 </code></pre><h2 id="七-AC代码"><a href="#七-AC代码" class="headerlink" title="七. AC代码"></a>七. AC代码</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize(2)</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> pii<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span>ll<span class="token punctuation">,</span> ll<span class="token operator">></span> pll<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> ull unsigned long long</span><span class="token macro property">#<span class="token directive keyword">define</span> IOS ios_base::sync_with_stdio(0); cin.tie(0);cout.tie(0);</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn<span class="token operator">=</span><span class="token number">1e6</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> ll mod<span class="token operator">=</span><span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    IOS<span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>k<span class="token punctuation">,</span>i<span class="token punctuation">;</span>    cin<span class="token operator">>></span>n<span class="token operator">>></span>k<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>cin<span class="token operator">>></span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>cin<span class="token operator">>></span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token number">0</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>n<span class="token number">-1</span><span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token keyword">else</span> cout<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线性DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CodeForces-1195C Basketball Exercise（线性DP）</title>
      <link href="/2019/10/30/CF1195C/"/>
      <url>/2019/10/30/CF1195C/</url>
      
        <content type="html"><![CDATA[<p><strong>传送门：</strong><a href="https://codeforces.com/contest/1195/problem/C" target="_blank" rel="noopener">CodeForces - 1195C</a></p><h2 id="一-题目描述"><a href="#一-题目描述" class="headerlink" title="一. 题目描述"></a>一. 题目描述</h2><p>Finally, a basketball court has been opened in SIS, so Demid has decided to hold a basketball exercise session. 2⋅n students have come to Demid’s exercise session, and he lined up them into two rows of the same size （there are exactly n people in each row）. Students are numbered from 1 to n in each row in order from left to right.</p><p>Now Demid wants to choose a team to play basketball. He will choose players from left to right, and the index of each chosen player （excluding the first one taken） will be strictly greater than the index of the previously chosen player. To avoid giving preference to one of the rows, Demid chooses students in such a way that no consecutive chosen students belong to the same row. The first student can be chosen among all 2n students （there are no additional constraints）, and a team can consist of any number of students.</p><p>Demid thinks, that in order to compose a perfect team, he should choose students in such a way, that the total height of all chosen students is maximum possible. Help Demid to find the maximum possible total height of players in a team he can choose.</p><a id="more"></a><h2 id="二-输入描述"><a href="#二-输入描述" class="headerlink" title="二. 输入描述"></a>二. 输入描述</h2><p>The first line of the input contains a single integer $n$ $(1≤n≤10^5)$ — the number of students in each row.</p><p>The second line of the input contains n integers h1,1,h1,2,…,h1,n $(1≤h1,i≤10^9)$, where h1,i is the height of the i-th student in the first row.</p><p>The third line of the input contains n integers h2,1,h2,2,…,h2,n $(1≤h2,i≤10^9)$, where h2,i is the height of the i-th student in the second row.</p><h2 id="三-输出描述"><a href="#三-输出描述" class="headerlink" title="三. 输出描述"></a>三. 输出描述</h2><p>Print a single integer — the maximum possible total height of players in a team Demid can choose.</p><h2 id="四-题意分析"><a href="#四-题意分析" class="headerlink" title="四. 题意分析"></a>四. 题意分析</h2><p>给定两个序列a和b,可以选任意的数,但要满足以下规则：连续选择的两个数不能来自同一行同一列，求和最大值。</p><h2 id="五-样例输入"><a href="#五-样例输入" class="headerlink" title="五. 样例输入"></a>五. 样例输入</h2><pre><code>59 3 5 7 35 8 1 4 5</code></pre><h2 id="六-样例输出"><a href="#六-样例输出" class="headerlink" title="六. 样例输出"></a>六. 样例输出</h2><pre><code>29</code></pre><h2 id="七-AC代码"><a href="#七-AC代码" class="headerlink" title="七. AC代码"></a>七. AC代码</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token macro property">#<span class="token directive keyword">pragma</span> GCC optimize(2)</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> pii<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span>ll<span class="token punctuation">,</span> ll<span class="token operator">></span> pll<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> ull unsigned long long</span><span class="token macro property">#<span class="token directive keyword">define</span> IOS ios_base::sync_with_stdio(0); cin.tie(0);cout.tie(0);</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn<span class="token operator">=</span><span class="token number">1e6</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> ll mod<span class="token operator">=</span><span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span>ll a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    IOS<span class="token punctuation">;</span>    ll n<span class="token punctuation">,</span>i<span class="token punctuation">;</span>    cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>cin<span class="token operator">>></span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>cin<span class="token operator">>></span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线性DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CodeForces-1247B2 TV Subscriptions （Hard Version）</title>
      <link href="/2019/10/30/CF1247B2/"/>
      <url>/2019/10/30/CF1247B2/</url>
      
        <content type="html"><![CDATA[<p><strong>传送门：</strong><a href="https://codeforces.com/contest/1247/problem/B2" target="_blank" rel="noopener">CodeForces - 1247B2</a></p><h2 id="一-题目描述"><a href="#一-题目描述" class="headerlink" title="一. 题目描述"></a>一. 题目描述</h2><p>The only difference between easy and hard versions is constraints.</p><p>The BerTV channel every day broadcasts one episode of one of the k TV shows. You know the schedule for the next n days: a sequence of integers a1,a2,…,an $(1≤a_i≤k)$, where ai is the show, the episode of which will be shown in i-th day.</p><p>The subscription to the show is bought for the entire show (i.e. for all its episodes), for each show the subscription is bought separately.</p><p>How many minimum subscriptions do you need to buy in order to have the opportunity to watch episodes of purchased shows d (1≤d≤n) days in a row? In other words, you want to buy the minimum number of TV shows so that there is some segment of d consecutive days in which all episodes belong to the purchased shows.</p><a id="more"></a><h2 id="二-输入描述"><a href="#二-输入描述" class="headerlink" title="二. 输入描述"></a>二. 输入描述</h2><p>The first line contains an integer t $(1≤t≤10000)$ — the number of test cases in the input. Then t test case descriptions follow.</p><p>The first line of each test case contains three integers n,k and d $(1≤n≤2⋅10^5$, $1≤k≤10^6$, $1≤d≤n)$. The second line contains n integers $a_1$,$a_2$,…,$a_n$ $(1≤a_i≤k)$, where ai is the show that is broadcasted on the i-th day.</p><p>It is guaranteed that the sum of the values ​​of n for all test cases in the input does not exceed $2⋅10^5$.</p><h2 id="三-输出描述"><a href="#三-输出描述" class="headerlink" title="三. 输出描述"></a>三. 输出描述</h2><p>Print t integers — the answers to the test cases in the input in the order they follow. The answer to a test case is the minimum number of TV shows for which you need to purchase a subscription so that you can watch episodes of the purchased TV shows on BerTV for d consecutive days. Please note that it is permissible that you will be able to watch more than d days in a row.</p><h2 id="四-题意分析"><a href="#四-题意分析" class="headerlink" title="四. 题意分析"></a>四. 题意分析</h2><p>求长度为D的区间内的最小元素种类数</p><h2 id="五-样例输入"><a href="#五-样例输入" class="headerlink" title="五. 样例输入"></a>五. 样例输入</h2><pre><code>45 2 21 2 1 2 19 3 33 3 3 2 2 2 1 1 14 10 410 8 6 416 9 83 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3</code></pre><h2 id="六-样例输出"><a href="#六-样例输出" class="headerlink" title="六. 样例输出"></a>六. 样例输出</h2><pre><code>2145</code></pre><h2 id="七-AC代码"><a href="#七-AC代码" class="headerlink" title="七. AC代码"></a>七. AC代码</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn<span class="token operator">=</span><span class="token number">1e6</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> ll mod<span class="token operator">=</span><span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span>mii p<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> t<span class="token punctuation">,</span>i<span class="token punctuation">;</span>    cin<span class="token operator">>></span>t<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        p<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n<span class="token punctuation">,</span>k<span class="token punctuation">,</span>d<span class="token punctuation">,</span>f<span class="token punctuation">,</span>ma<span class="token operator">=</span><span class="token number">1000000</span><span class="token punctuation">;</span>        cin<span class="token operator">>></span>n<span class="token operator">>></span>k<span class="token operator">>></span>d<span class="token punctuation">;</span>        <span class="token keyword">int</span> cnt<span class="token operator">=</span>d<span class="token punctuation">;</span>        <span class="token keyword">int</span> sum<span class="token operator">=</span>n<span class="token operator">-</span>d<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cin<span class="token operator">>></span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            p<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">>=</span>d<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> x<span class="token operator">=</span>p<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ma<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>ma<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token operator">-</span>d<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span>p<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token operator">-</span>d<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> p<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token operator">-</span>d<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        cout<span class="token operator">&lt;&lt;</span>ma<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
